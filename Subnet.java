public class Subnet extends javax.swing.JFrame {

    /**
     * Creates new form Subnet
     */
    public Subnet() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton4 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Subnet Calculator");
        jLabel2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 51, 51)));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("IP ADDRESS:");

        jTextField1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("No. of. Subnets:");

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(204, 0, 51));

        jButton1.setForeground(new java.awt.Color(153, 0, 51));
        jButton1.setText("Done");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setForeground(new java.awt.Color(153, 0, 51));
        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Classful");

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jRadioButton2.setText("Classless");

        jButton4.setForeground(new java.awt.Color(153, 0, 51));
        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(53, 53, 53)
                                .addComponent(jButton1))
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jRadioButton1)
                .addGap(37, 37, 37)
                .addComponent(jRadioButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           
    public int[] cidr_input(String input, int flag, int subnets){
        String[] temparray;
        int subneting_bits = (int) (Math.log(subnets) / Math.log(2)+ 1e-10);
        int[] tempint = new int[5];
        int temp;
        String sep = "\\\\";
        temparray = input.split("\\.|\\\\",5);
        for(int i = 0; i < 5; i++){
                    try{
			temp = Integer.parseInt(temparray[i]);
			tempint[i] = temp;
                    }
                    catch(Exception e){
                        jTextArea1.append("Invalid IP ADDRESS");
                        flag = 0;
                        return null;
                    }
                    if(i < 4){
                        if(temp < 0 || temp > 255){
                            jTextArea1.append("Invalid IP ADDRESS");
                            flag = 0;
                            return null;
                        }
                    }
                    if(i == 4){
                        if(temp < 0 || temp > 31){
                            jTextArea1.append("Invalid Network ID");
                            flag = 0;
                            return null;
                        }
                    }
                    
        }
        if((tempint[4]+subneting_bits) >= 32){
                        jTextArea1.append("Exceeding Subnets limit, Please change no of subnets");
                        flag = 0;
                        return null;
                    }
    return tempint;
    }
    
    public int[] cidr_networkdivider(int[] temp, int subnets){
        int subneting_bits = (int) (Math.log(subnets) / Math.log(2)+ 1e-10);
        int[] data;
        data = new int[6];
        int network_bits = subneting_bits + temp[4];
        int host_bits = 32 - network_bits;
        int hosts = (int)Math.pow(2, host_bits);
        switch(network_bits){
            case 1: //network bits may be 0 and subnets are 2
               data[0] = 128;
               data[2] = 0;
               data[3] = 0;
               data[1] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 2:
               data[0] = 192;
               data[2] = 0;
               data[3] = 0;
               data[1] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
               
            case 3:
               data[0] = 224;
               data[2] = 0;
               data[3] = 0;
               data[1] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
               
            case 4:
               data[0] = 240;
               data[2] = 0;
               data[3] = 0;
               data[1] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 5:
               data[0] = 248;
               data[2] = 0;
               data[3] = 0;
               data[1] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 6:
               data[0] = 252;
               data[2] = 0;
               data[3] = 0;
               data[1] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 7:
               data[0] = 254;
               data[2] = 0;
               data[3] = 0;
               data[1] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            
            case 8:
               data[0] = 255;
               data[2] = 0;
               data[3] = 0;
               data[1] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
               
            case 9: //network bits may be 0 and subnets are 2
               data[0] = 255;
               data[1] = 128;
               data[2] = 0;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 10:
               data[0] = 255;
               data[1] = 192;
               data[2] = 0;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
               
            case 11:
               data[0] = 255;
               data[1] = 224;
               data[2] = 0;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
               
            case 12:
               data[0] = 255;
               data[1] = 240;
               data[2] = 0;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 13:
               data[0] = 255;
               data[1] = 248;
               data[2] = 0;
               data[3] = 0;
               data[4] = 1;
               data[5] = hosts;
               break;
            case 14:
               data[0] = 255;
               data[1] = 252;
               data[2] = 0;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 15:
               data[0] = 255;
               data[1] = 254;
               data[2] = 0;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            
            case 16:
               data[0] = 255;
               data[1] = 255;
               data[2] = 0;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            
            case 17: //network bits may be 0 and subnets are 2
               data[0] = 255;
               data[1] = 255;
               data[2] = 128;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 18:
               data[0] = 255;
               data[1] = 255;
               data[2] = 192;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
               
            case 19:
               data[0] = 255;
               data[1] = 255;
               data[2] = 224;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
               
            case 20:
               data[0] = 255;
               data[1] = 255;
               data[2] = 240;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 21:
               data[0] = 255;
               data[1] = 255;
               data[2] = 248;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 22:
               data[0] = 255;
               data[1] = 255;
               data[2] = 252;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 23:
               data[0] = 255;
               data[1] = 255;
               data[2] = 254;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            
            case 24:
               data[0] = 255;
               data[1] = 255;
               data[2] = 255;
               data[3] = 0;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 25: //network bits may be 0 and subnets are 2
               data[0] = 255;
               data[1] = 255;
               data[2] = 255;
               data[3] = 128;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 26:
               data[0] = 255;
               data[1] = 255;
               data[2] = 255;
               data[3] = 192;
               data[4] = network_bits;
               data[5] = hosts;
               break;
               
            case 27:
               data[0] = 255;
               data[1] = 255;
               data[2] = 255;
               data[3] = 224;
               data[4] = network_bits;
               data[5] = hosts;
               break;
               
            case 28:
               data[0] = 255;
               data[1] = 255;
               data[2] = 255;
               data[3] = 240;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 29:
               data[0] = 255;
               data[1] = 255;
               data[2] = 255;
               data[3] = 248;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 30:
               data[0] = 255;
               data[1] = 255;
               data[2] = 255;
               data[3] = 252;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            case 31:
               data[0] = 255;
               data[1] = 255;
               data[2] = 255;
               data[3] = 254;
               data[4] = network_bits;
               data[5] = hosts;
               break;
            
            default:
               System.exit(0);     
        }
        
        return data;
    }
    public int[] input(String input, int flag){
		String[] temparray;
		int[] tempint = new int[4];
		int temp = 0;
		String ipaddress = input;
		//ipaddress = input.nextLine();
		String delimiter = "\\.";
		temparray = ipaddress.split(delimiter);
                if(temparray.length != 4){
                    jTextArea1.append("invalid IP address");
                    flag = 0;
                    return null;
                }
		for(int i = 0; i < 4; i++){
                    try{
			temp = Integer.parseInt(temparray[i]);
			tempint[i] = temp;
                    }
                    catch(Exception e){
                        jTextArea1.append("Invalid IP ADDRESS");
                        flag = 0;
                        return null;
                    }
			if(temp < 0 || temp > 255){
                            jTextArea1.append("invalid IP address");
                            flag = 0;
                            return null;
			}
		}
		return tempint;
	}
    public static char ipclass(int temp){
		return (temp < 128 ? 'A' : (temp > 127 && temp < 192) ? 'B' : (temp > 191 && temp < 224) ? 'C' : 'N');
	}
    
    public int[] network_divider(int[] ipaddress, char ipclass, int subnets){
    	if(subnets == 0 || subnets == 1)
    		return null;
    	int subneting_bits = (int) (Math.log(subnets) / Math.log(2)+ 1e-10);
    	int host_bits, addresses;
    	int[] data = new int[6];	
		data[0] = subneting_bits;
    	/*first add stores no of bits used for subnetting second address stores no of address in each subnet, third to 	sixth contains subnetmask*/
		switch(ipclass){
			case 'A':
				host_bits = 24 - subneting_bits;
				addresses = (int) Math.pow(2, host_bits);
				int third = 128, second = 0, first = 0, changefactor = 128;
				int third_bits = 0, second_bit = 0, first_bits = 0;
				third_bits = subneting_bits;
				if(subneting_bits > 8){
					second = 128;
					if(subneting_bits > 16){
						first_bits = subneting_bits - 16;
						second_bit = subneting_bits - 8 - first_bits;
						third_bits = subneting_bits - second_bit - first_bits;
						first = 128;
					}
					second_bit = subneting_bits - 8;
					third_bits = subneting_bits - second_bit;
				}
				while(third_bits > 1){
					changefactor = changefactor/2;
					third = third + changefactor;
					third_bits--;
				}
				changefactor = 128;
				while(second_bit > 1){
					changefactor = changefactor/2;
					second = second + changefactor;
					second_bit--;
				}
				changefactor = 128;
				while(first_bits > 1){
					changefactor = changefactor/2;
					first = first + changefactor;
					first_bits--;
				}
				data[1] = addresses;
				data[2] = 255;
				data[3] = third;
				data[4] = second;
				data[5] = first;				
				break;
			case 'B':
				int second_last = 128, last = 0, changes = 128;
				int second_bits =0, last_bits = 0;
				host_bits = 16 - subneting_bits;
				addresses = (int) Math.pow(2, host_bits);
				second_bits = subneting_bits;
				if(subneting_bits > 8){
					last_bits = subneting_bits -8;
					second_bits = subneting_bits - last_bits;
					last = 128;
				}
				while(second_bits > 1){
					changes = changes/2;
					second_last = second_last + changes;
					second_bits--;
				}
				changes = 128;
				while(last_bits > 1){
					changes = changes/2;
					last = last + changes;
					last_bits--;
				}
				data[1] = addresses;
				data[2] = data[3] = 255;
				data[4] = second_last;
				data[5] = last;
				break;
			case 'C':
				int last_octet = 128, change = 128;
				host_bits = 8 - subneting_bits;
				addresses = (int) Math.pow(2, host_bits);
				while(subneting_bits > 1){
					change = change/2;
					last_octet = last_octet + change;
					subneting_bits--;
				}
				data[1] = addresses;
				for(int i = 2; i < 5; i++){
					data[i] = 255;
				}
				data[5] = last_octet;
				break;
		}
		return data;
	}
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        jTextArea1.setText(null);
        String ipaddress = jTextField1.getText();
        int flag = 1;
        int subnets = Integer.parseInt(jTextField2.getText());
        if(jRadioButton1.isSelected()){    
            char ipclass;
            int[] temparray;
            int temp;
            temparray = input(ipaddress, flag);
            temp = temparray[0];
            ipclass = ipclass(temp);
            if(ipclass == 'C'){
                if(subnets > 128){
                        jTextArea1.append("Subnets limit exceeded,\nenter subnet value less than 128");
                }
            } else if(ipclass == 'B'){
                if(subnets > 32768){
                        jTextArea1.append("Subnets limit exceeded,\nenter subnet value less than 32768");
                }
            } else if(ipclass == 'A'){
                if(subnets > 8388608){
                        jTextArea1.append("Subnets limit exceeded,\nenter subnet value less than 8388608");
                }
            }
            if(flag == 1){
                temparray = network_divider(temparray, ipclass, subnets);
        
                jTextArea1.append("SUBNETTING DETAILS:\n\n"+"Class Of Address:\t      "+Character.toString(ipclass)+"\n\nNo Of Bits For Subneting:\t      "+temparray[0]);
                jTextArea1.append("\n\nNo of add. in each Subnet:\t      "+temparray[1]+"\n\nSubnet mask:\t\t      ");
                for(int i = 2; i < 6; i++){
                    jTextArea1.append(Integer.toString(temparray[i]));
                    if(i != 5)
                        jTextArea1.append(".");
                }
            }
        }
        else if(jRadioButton2.isSelected()){
            int[] temp;
            temp = cidr_input(ipaddress, flag, subnets);
            if(flag == 1){
                temp = cidr_networkdivider(temp, subnets);
            }
            jTextArea1.append("SUBNETING DETAILS:\n\n"+"Subnet Mask:\t\t"+temp[0]+"."+temp[1]+"."+temp[2]+"."+temp[3]+"\n\nNetwork Bits:\t\t"+temp[4]+"\n\nHost Bits:\t\t"+(32-temp[4])+"\n\nNo of Hosts in Subnet:\t"+temp[5]);
        }
        else{
            jTextArea1.append("Please select incorrect mode");
        }
       
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        System.exit(0);
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        jTextArea1.setText(" ");
        jTextField1.setText(" ");
        jTextField2.setText(" ");
        jRadioButton1.doClick();
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Subnet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Subnet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Subnet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Subnet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Subnet().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration                   
}
